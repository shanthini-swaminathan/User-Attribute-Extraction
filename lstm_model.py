# -*- coding: utf-8 -*-
"""LSTM-Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19vJmNz5F-gz8pfQDu8PFNUIxdRoZnQ0q
"""

import pandas as pd
import numpy as np

dataset = pd.read_csv("data.csv", encoding="latin1")
dataset.head(40)

collection = list(set(dataset["Word"].values))
n_collection = len(collection); n_collection

attributes = list(set(dataset["Tag"].values))
n_attributes = len(attributes); n_attributes

class Sentence(object):
    
    def __init__(self, data):
        self.n_sent = 1
        self.data = data
        self.empty = False
        agg_func = lambda s: [(w, p, t) for w, p, t in zip(s["Word"].values.tolist(),
                                                           s["POS"].values.tolist(),
                                                           s["Tag"].values.tolist())]
        self.grouped = self.data.groupby("Sentence #").apply(agg_func)
        self.sentences = [s for s in self.grouped]
    
    def get_next(self):
        try:
            s = self.grouped["Sentence: {}".format(self.n_sent)]
            self.n_sent += 1
            return s
        except:
            return None

getter = Sentence(dataset)
sent = getter.get_next()
print(sent)

sentences = getter.sentences

max_len = 75
unique_words = {w: i + 1 for i, w in enumerate(collection)}
unique_tags = {t: i for i, t in enumerate(attributes)}
a1 = unique_words["cook"]
print(a1)
a2 = unique_tags["Hob"]
print(a2)

from keras.preprocessing.sequence import pad_sequences
X = [[unique_words[w[0]] for w in s] for s in sentences]

X = pad_sequences(maxlen=max_len, sequences=X, padding="post", value=n_collection-1)

y= [[unique_tags[w[2]] for w in s] for s in sentences]
y = pad_sequences(maxlen=max_len, sequences=y, padding="post", value=unique_tags["Hob"])

from keras.utils import to_categorical
y = [to_categorical(i, num_classes=n_attributes) for i in y]

from sklearn.model_selection import train_test_split
X_tr, X_te, y_tr, y_te = train_test_split(X, y, test_size=0.1)

!pip install git+https://www.github.com/keras-team/keras-contrib.git

!pip install -U keras

from keras.models import Model, Input
from keras.layers import LSTM, Embedding, Dense, TimeDistributed, Dropout, Bidirectional
from keras_contrib.layers import CRF

input = Input(shape=(max_len,))
model = Embedding(input_dim=n_collection + 1, output_dim=20,
                  input_length=max_len)(input)  # 20-dim embedding
model = Bidirectional(LSTM(units=50, return_sequences=True,
                           recurrent_dropout=0.1))(model)  # variational biLSTM
model = TimeDistributed(Dense(50, activation="relu"))(model)  # a dense layer as suggested by neuralNer
crf = CRF(n_attributes)  # CRF layer
out = crf(model)

model = Model(input, out)
model.compile(optimizer="rmsprop", loss=crf.loss_function, metrics=[crf.accuracy])

a3 = model.summary()
print(a3)

!pip install seqeval

history = model.fit(X_tr, np.array(y_tr), batch_size=32, epochs=100,
                    validation_split=0.1, verbose=1)

from seqeval.metrics import precision_score, recall_score, f1_score, classification_report
test_pred = model.predict(X_te, verbose=1)

prediction = {i: w for w, i in unique_tags.items()}

def pred2label(pred):
    out = []
    for pred_i in pred:
        out_i = []
        for p in pred_i:
            p_i = np.argmax(p)
            out_i.append(prediction[p_i].replace("PAD", "O"))
        out.append(out_i)
    return out
    
pred_labels = pred2label(test_pred)
test_labels = pred2label(y_te)

a4 =format(f1_score(test_labels, pred_labels))
print(a4)

a5 = classification_report(test_labels, pred_labels)
print(a5)
#print(classification_report(test_labels, pred_labels))

i = 1
p = model.predict(np.array([X_te[i]]))
p = np.argmax(p, axis=-1)
true = np.argmax(y_te[i], -1)
print("{:15}||{:5}||{}".format("Word", "True", "Pred"))
print(30 * "=")
for w, t, pred in zip(X_te[i], true, p[0]):
    if w != 0:
        print("{:15}: {:5} {}".format(collection[w-1], attributes[t], attributes[pred]))

test_sentence = ["Hawking", "was", "a", "Fellow", "of", "the", "Royal", "Society", ",", "a", "lifetime", "member",
                 "of", "the", "Pontifical","collecting", "Academy", "of", "Sciences", ",", "and", "a", "recipient", "of",
                 "the", "Presidential", "Medal", "of", "Freedom", ",", "the", "highest", "civilian", "award",
                 "in", "the", "United", "States","cooking", "."]

x_test_sent = pad_sequences(sequences=[[unique_words.get(w, 0) for w in test_sentence]],
                            padding="post", value=0, maxlen=max_len)

p = model.predict(np.array([x_test_sent[0]]))
p = np.argmax(p, axis=-1)
print("{:15}||{}".format("Word", "Prediction"))
print(30 * "=")
for w, pred in zip(test_sentence, p[0]):
    print("{:15}: {:5}".format(w, attributes[pred]))

!pip install flask-ngrok

from flask_ngrok import run_with_ngrok
from flask import Flask, render_template
app = Flask(__name__)
run_with_ngrok(app)   #starts ngrok when the app is run
@app.route("/")
def home():
    return render_template("index.html")
@app.route("/out")
def out():
    return render_template("out.html", output = a4, output2 = a1, output3 = a2)
@app.route("/dataset")
def dataset():
    return render_template("data.csv")


if __name__ == "__main__":
	app.run()